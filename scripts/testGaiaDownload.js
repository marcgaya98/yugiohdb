/**
 * Script de prueba espec√≠fico para Gaia The Fierce Knight
 */
import ImageDownloader from './downloadCardImages.js';
import Card from '../models/Card.js';

async function testGaiaDownload() {
    console.log('üß™ Probando descarga espec√≠fica de Gaia The Fierce Knight...');

    try {
        // Buscar espec√≠ficamente a Gaia
        const gaia = await Card.findOne({
            where: {
                name: 'Gaia The Fierce Knight'
            }
        });

        if (!gaia) {
            console.log('‚ùå No se encontr√≥ Gaia The Fierce Knight');
            return;
        }

        console.log(`üìö Carta encontrada: ${gaia.name}`);
        console.log(`üî¢ Password original: ${gaia.password}`);

        // Importar utilidades
        const { normalizePasswordForUrl } = await import('../utils/passwordUtils.js');
        const normalizedPassword = normalizePasswordForUrl(gaia.password);
        console.log(`üî¢ Password normalizado: ${normalizedPassword}`);

        // Generar URLs que se usar√°n
        console.log('\nüåê URLs que se intentar√°n descargar:');
        console.log(`   Normal: https://images.ygoprodeck.com/images/cards/${normalizedPassword}.jpg`);
        console.log(`   Small: https://images.ygoprodeck.com/images/cards_small/${normalizedPassword}.jpg`);
        console.log(`   Cropped: https://images.ygoprodeck.com/images/cards_cropped/${normalizedPassword}.jpg`);

        const downloader = new ImageDownloader();

        // Crear directorios
        downloader.createDirectories();

        // Descargar im√°genes de Gaia
        console.log(`\nüé¥ Procesando carta: ${gaia.name}`);
        const hasNewDownloads = await downloader.downloadCardImages(gaia);

        if (hasNewDownloads) {
            console.log(`   ‚úÖ Im√°genes descargadas para ${gaia.name}`);
        } else {
            console.log(`   ‚è≠Ô∏è  Im√°genes ya exist√≠an para ${gaia.name}`);
        }

        // Verificar si las im√°genes se descargaron
        const fs = await import('fs');
        const path = await import('path');
        const { fileURLToPath } = await import('url');

        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        const imageDir = path.join(__dirname, '../public/images/cards');

        console.log('\nüìÅ Verificando archivos descargados:');
        ['normal', 'small', 'cropped'].forEach(type => {
            const imagePath = path.join(imageDir, type, `${normalizedPassword}.jpg`);
            const exists = fs.existsSync(imagePath);
            console.log(`   ${type}: ${exists ? '‚úÖ' : '‚ùå'} ${imagePath}`);

            if (exists) {
                const stats = fs.statSync(imagePath);
                console.log(`      Tama√±o: ${(stats.size / 1024).toFixed(2)} KB`);
            }
        });

        console.log('\nüéâ Prueba de Gaia completada!');

    } catch (error) {
        console.error('‚ùå Error en la prueba:', error.message);
        console.error(error.stack);
    }
}

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
    testGaiaDownload().catch(console.error);
}
