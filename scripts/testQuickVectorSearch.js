// Script para probar el sistema de b√∫squeda sem√°ntica con vectores de caracter√≠sticas
import ClipEmbeddingService from '../services/ClipEmbeddingService.js';
import sequelize from '../config/database.js';

async function testVectorSemanticSearch() {
    console.log('üß™ Probando b√∫squeda sem√°ntica con vectores de caracter√≠sticas...\n');

    try {
        // Verificar estado de embeddings
        const stats = await ClipEmbeddingService.getEmbeddingStats();
        console.log('üìä Estado actual:');
        console.log(`Cartas con embeddings: ${stats.cardsWithClipEmbedding}`);
        console.log(`Porcentaje completado: ${stats.completionPercentage}%\n`);

        if (stats.cardsWithClipEmbedding === 0) {
            console.log('‚ö†Ô∏è No hay embeddings disponibles. Ejecuta primero el script de generaci√≥n.');
            return;
        }

        // Lista de b√∫squedas de prueba
        const searchQueries = [
            "purple fusion swirl",
            "two monsters merging in vortex",
            "magical energy combining creatures",
            "spell card fusion light",
            "vibrant green and purple fusion",
            "glowing vortex merging figures",
            "ethereal fusion spiral",
            "monster fusion glowing aura",
            "intertwined energy beams fusion",
            "twisting fusion portal",
        ];

        // Probar cada b√∫squeda
        for (const query of searchQueries) {
            console.log(`\nüîç Probando b√∫squeda: "${query}"`);
            console.log('‚îÄ'.repeat(50));

            try {
                const results = await ClipEmbeddingService.searchByVisualDescription(query, 5);

                if (results.length > 0) {
                    console.log(`‚úÖ Encontradas ${results.length} cartas:`);
                    results.forEach((result, i) => {
                        console.log(`${i + 1}. ${result.name} (${Math.round(result.similarity * 100)}% similitud)`);
                    });
                } else {
                    console.log('‚ùå No se encontraron resultados');
                }
            } catch (error) {
                console.error(`‚ùå Error en b√∫squeda "${query}":`, error.message);
            }

            // Pausa entre b√∫squedas
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        console.log('\nüéâ Pruebas completadas');

    } catch (error) {
        console.error('‚ùå Error en las pruebas:', error);
    } finally {
        await sequelize.close();
    }
}

// Ejecutar solo si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
    testVectorSemanticSearch();
}

export default testVectorSemanticSearch;
